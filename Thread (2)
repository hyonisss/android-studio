package edu.scsa.day5;

class MyRunnable implements Runnable {
	@Override
	public void run() {
		// TODO Auto-generated method stub
		for(int i=1; i<6; i++) {
			System.out.println(Thread.currentThread().getName()+" : " + i);
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}
}
//Thread 2개가 도는 것
public class TestThread {

	public static void main(String[] args) {
	System.out.println("main start..."+Thread.currentThread().getName());
	MyRunnable myR = new MyRunnable();
	Thread t = new Thread(myR);
	t.start();
	
	System.out.println("main end..."+Thread.currentThread().getName());

	}

}

=======================================================================
<익명 nested로 구현- 더 많이 쓰는 방법>

public class TestThread {

	public static void main(String[] args) {
	System.out.println("main start..."+Thread.currentThread().getName());
	
	new Thread(new Runnable() {
		
		@Override
		public void run() {
			// TODO Auto-generated method stub
			for(int i=1; i<6; i++) {
				System.out.println(Thread.currentThread().getName()+" : " + i);
				try {
					Thread.sleep(1000);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
		}
	}).start();
		
	System.out.println("main end..."+Thread.currentThread().getName());
	}
}
